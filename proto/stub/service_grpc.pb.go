// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: service.proto

package stub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FixServiceClient is the client API for FixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FixServiceClient interface {
	//图片
	GetPicCategory1(ctx context.Context, in *GetPicCategory1Req, opts ...grpc.CallOption) (*GetPicCategory1Rsp, error)
	GetPicList1(ctx context.Context, in *GetPicList1Req, opts ...grpc.CallOption) (*GetPicList1Rsp, error)
	GetHotPicList1(ctx context.Context, in *GetHotPicList1Req, opts ...grpc.CallOption) (*GetPicList1Rsp, error)
	GetBanner(ctx context.Context, in *GetBannerReq, opts ...grpc.CallOption) (*GetBannerRsp, error)
	GetSearchList(ctx context.Context, in *GetSearchReq, opts ...grpc.CallOption) (*GetSearchRsp, error)
}

type fixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixServiceClient(cc grpc.ClientConnInterface) FixServiceClient {
	return &fixServiceClient{cc}
}

func (c *fixServiceClient) GetPicCategory1(ctx context.Context, in *GetPicCategory1Req, opts ...grpc.CallOption) (*GetPicCategory1Rsp, error) {
	out := new(GetPicCategory1Rsp)
	err := c.cc.Invoke(ctx, "/stub.FixService/GetPicCategory1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixServiceClient) GetPicList1(ctx context.Context, in *GetPicList1Req, opts ...grpc.CallOption) (*GetPicList1Rsp, error) {
	out := new(GetPicList1Rsp)
	err := c.cc.Invoke(ctx, "/stub.FixService/GetPicList1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixServiceClient) GetHotPicList1(ctx context.Context, in *GetHotPicList1Req, opts ...grpc.CallOption) (*GetPicList1Rsp, error) {
	out := new(GetPicList1Rsp)
	err := c.cc.Invoke(ctx, "/stub.FixService/GetHotPicList1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixServiceClient) GetBanner(ctx context.Context, in *GetBannerReq, opts ...grpc.CallOption) (*GetBannerRsp, error) {
	out := new(GetBannerRsp)
	err := c.cc.Invoke(ctx, "/stub.FixService/GetBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixServiceClient) GetSearchList(ctx context.Context, in *GetSearchReq, opts ...grpc.CallOption) (*GetSearchRsp, error) {
	out := new(GetSearchRsp)
	err := c.cc.Invoke(ctx, "/stub.FixService/GetSearchList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixServiceServer is the server API for FixService service.
// All implementations must embed UnimplementedFixServiceServer
// for forward compatibility
type FixServiceServer interface {
	//图片
	GetPicCategory1(context.Context, *GetPicCategory1Req) (*GetPicCategory1Rsp, error)
	GetPicList1(context.Context, *GetPicList1Req) (*GetPicList1Rsp, error)
	GetHotPicList1(context.Context, *GetHotPicList1Req) (*GetPicList1Rsp, error)
	GetBanner(context.Context, *GetBannerReq) (*GetBannerRsp, error)
	GetSearchList(context.Context, *GetSearchReq) (*GetSearchRsp, error)
	mustEmbedUnimplementedFixServiceServer()
}

// UnimplementedFixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFixServiceServer struct {
}

func (UnimplementedFixServiceServer) GetPicCategory1(context.Context, *GetPicCategory1Req) (*GetPicCategory1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicCategory1 not implemented")
}
func (UnimplementedFixServiceServer) GetPicList1(context.Context, *GetPicList1Req) (*GetPicList1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicList1 not implemented")
}
func (UnimplementedFixServiceServer) GetHotPicList1(context.Context, *GetHotPicList1Req) (*GetPicList1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotPicList1 not implemented")
}
func (UnimplementedFixServiceServer) GetBanner(context.Context, *GetBannerReq) (*GetBannerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (UnimplementedFixServiceServer) GetSearchList(context.Context, *GetSearchReq) (*GetSearchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchList not implemented")
}
func (UnimplementedFixServiceServer) mustEmbedUnimplementedFixServiceServer() {}

// UnsafeFixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FixServiceServer will
// result in compilation errors.
type UnsafeFixServiceServer interface {
	mustEmbedUnimplementedFixServiceServer()
}

func RegisterFixServiceServer(s grpc.ServiceRegistrar, srv FixServiceServer) {
	s.RegisterService(&FixService_ServiceDesc, srv)
}

func _FixService_GetPicCategory1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPicCategory1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixServiceServer).GetPicCategory1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stub.FixService/GetPicCategory1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixServiceServer).GetPicCategory1(ctx, req.(*GetPicCategory1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixService_GetPicList1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPicList1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixServiceServer).GetPicList1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stub.FixService/GetPicList1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixServiceServer).GetPicList1(ctx, req.(*GetPicList1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixService_GetHotPicList1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotPicList1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixServiceServer).GetHotPicList1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stub.FixService/GetHotPicList1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixServiceServer).GetHotPicList1(ctx, req.(*GetHotPicList1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixService_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixServiceServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stub.FixService/GetBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixServiceServer).GetBanner(ctx, req.(*GetBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixService_GetSearchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixServiceServer).GetSearchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stub.FixService/GetSearchList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixServiceServer).GetSearchList(ctx, req.(*GetSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FixService_ServiceDesc is the grpc.ServiceDesc for FixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stub.FixService",
	HandlerType: (*FixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPicCategory1",
			Handler:    _FixService_GetPicCategory1_Handler,
		},
		{
			MethodName: "GetPicList1",
			Handler:    _FixService_GetPicList1_Handler,
		},
		{
			MethodName: "GetHotPicList1",
			Handler:    _FixService_GetHotPicList1_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _FixService_GetBanner_Handler,
		},
		{
			MethodName: "GetSearchList",
			Handler:    _FixService_GetSearchList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
